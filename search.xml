<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java学习记录(三)</title>
      <link href="2021/05/02/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95(%E4%B8%89)/"/>
      <url>2021/05/02/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95(%E4%B8%89)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="JAVA学习记录-三"><a href="#JAVA学习记录-三" class="headerlink" title="JAVA学习记录(三)"></a>JAVA学习记录(三)</h2><h3 id="一、数组"><a href="#一、数组" class="headerlink" title="一、数组"></a>一、数组</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><ul><li>数组是相同类型数据的<code>有序集合</code>。</li><li>数组描述的是相同类型的若干数据，按照一定的先后次序排列组合而成</li><li>其中，每一个数据称作一个数组元素，每个数组元素可以通过一个下标来访问它们</li></ul><h4 id="数组的声明与创建"><a href="#数组的声明与创建" class="headerlink" title="数组的声明与创建"></a>数组的声明与创建</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> [] arrays;<span class="comment">// 首选方法</span></span><br><span class="line"><span class="keyword">int</span> arrays[];<span class="comment">// 效果相同但不是首选方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Java中是使用new操作符来创建数组的</span></span><br><span class="line"><span class="keyword">int</span> [] arrays = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组的元素是通过索引访问的。</span></span><br></pre></td></tr></table></figure><h4 id="数组的三种初始化"><a href="#数组的三种初始化" class="headerlink" title="数组的三种初始化"></a>数组的三种初始化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 静态初始化: 创建+赋值</span></span><br><span class="line">        <span class="keyword">int</span> [] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">        <span class="comment">// 动态初始化: 包含默认初始化</span></span><br><span class="line">        <span class="comment">//默认初始化：数组是引用类型，因此数组一经分配空间，其中每个元素也被按照实例变量同样的方式被隐式的初始化。</span></span><br><span class="line">        <span class="keyword">int</span> [] b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">int</span> [] nums = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">8</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : nums) &#123;</span><br><span class="line">            System.out.println(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">数组是引用类型，因此数组一经分配空间，其中每个元素也被按照实例变量同样的方式被隐式的初始化。</font></p><h4 id="Java内存"><a href="#Java内存" class="headerlink" title="Java内存"></a>Java内存</h4><p><img src="https://gitee.com/yoyosave/mapdepot1/raw/master/img/image-20210502190945489.png" alt="image-20210502190945489"></p><p><font color="red">我们定义数组的时候，实在栈中储存，当我们实例化数组（new []）的时候数组在堆中开辟空间</font></p><p><img src="https://gitee.com/yoyosave/mapdepot1/raw/master/img/image-20210502194922973.png" alt="image-20210502194922973"></p><h4 id="数组的四个基本特点"><a href="#数组的四个基本特点" class="headerlink" title="数组的四个基本特点"></a>数组的四个基本特点</h4><ul><li>其长度是确定了。数组一旦被创建，它的大小就不可改变；</li><li>其元素必须是相同的类型，不允许出现混合类型</li><li>数组中的元素可以是任何数据类型，包括基本类型和引用类型。（但是必须一致）</li><li>数组变量属引用类型，数组也可以看作对象。数组的元素相当于这个对象的成员变量，数组本身就是对象，<font color="red">java中对象是在堆中的</font></li></ul><h4 id="数组的边界"><a href="#数组的边界" class="headerlink" title="数组的边界"></a>数组的边界</h4><p>下标的合法区间是：<code>[0,length-1]</code>,如果下标越界就会报错；</p><p><code>ArrayIndexOutOfBoundsException</code>：数组下标越界</p><h4 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> [] arrays = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">15</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : arrays)&#123;</span><br><span class="line">            System.out.print(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 可以使用增强型for循环进行遍历，但是这种方法没有下标。</span></span><br><span class="line">        <span class="comment">// 也就是无法进行更多的操作</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j : arrays)&#123;</span><br><span class="line">            max = Math.max(max,j);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：&quot;</span>+max);</span><br><span class="line">        printArrays(arrays);</span><br><span class="line">        reverse(arrays);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这种for循环遍历就有下标可以操作。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArrays</span><span class="params">(<span class="keyword">int</span>[] arrays)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">            System.out.print(arrays[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这是数组逆序一种操作的思想</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] arrays)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays.length / <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arrays[i];</span><br><span class="line">            arrays[i] = arrays[arrays.length - <span class="number">1</span> - i];</span><br><span class="line">            arrays[arrays.length - <span class="number">1</span> - i] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        printArrays(arrays);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用Arrays类"><a href="#使用Arrays类" class="headerlink" title="使用Arrays类"></a>使用Arrays类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">123</span>,<span class="number">345</span>,<span class="number">222</span>,<span class="number">61</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">563</span>,<span class="number">231</span>&#125;;</span><br><span class="line">        <span class="comment">// Arrays.sort 让数组按升序排</span></span><br><span class="line">        Arrays.sort(a);</span><br><span class="line">        <span class="comment">//将指定的字节覆盖指定元素 如下面就是2-4被0覆盖 [2,4)</span></span><br><span class="line">        Arrays.fill(a,<span class="number">2</span>,<span class="number">4</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// Arrays.toString 打印数组元素</span></span><br><span class="line">        System.out.println(Arrays.toString(a));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 二维数组的定义与创建其实与一维数组差不多</span></span><br><span class="line">        <span class="keyword">int</span>[][] arrays = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>&#125;, &#123;<span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">5</span>, <span class="number">6</span>&#125;, &#123;<span class="number">7</span>, <span class="number">8</span>&#125;&#125;;</span><br><span class="line">        printArrays(arrays);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 二维数组的遍历需要两个for循环嵌套</span></span><br><span class="line">    <span class="comment">// arrays.length 是外层的长度，arrays[i].length才是里层的长度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArrays</span><span class="params">(<span class="keyword">int</span>[][] arrays)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arrays[i].length; j++) &#123;</span><br><span class="line">                System.out.println(arrays[i][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>自己写的一种冒泡排序，新手算法不算优秀</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        System.out.print(Arrays.toString(sort(a)));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span>[] arrays)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = arrays.length-<span class="number">1</span>; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">int</span> max = arrays[j-<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (arrays[j]&lt;arrays[j-<span class="number">1</span>])&#123;</span><br><span class="line">                    arrays[j-<span class="number">1</span>]=arrays[j];</span><br><span class="line">                    arrays[j] = max;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> arrays;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h4><p>当一个数组中大部分元素为0，或者为同一值的数组时，可以使用稀疏数组来保存该数组。</p><p>稀疏数组的处理方式：</p><ul><li>记录数组一共有<code>几行几列</code>，有多少个<code>不同值</code></li><li>把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小规模</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.创建二维数组 11*11 0:没有棋子 1：黑棋 2：白棋</span></span><br><span class="line">        <span class="keyword">int</span>[][] arrays = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        arrays[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        arrays[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : arrays) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) &#123;</span><br><span class="line">                System.out.print(anInt+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历获取一共有多少个不同的元素</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arrays[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arrays[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    sum++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建稀疏数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] array = <span class="keyword">new</span> <span class="keyword">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给稀疏数组第一行赋值，确定行数、列数、以及不同的元素的个数</span></span><br><span class="line">        array[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">        array[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">        array[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将不同元素的所在行与所在列还有值传递给稀疏数组</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arrays[i].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arrays[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    array[count][<span class="number">0</span>]=i;</span><br><span class="line">                    array[count][<span class="number">1</span>]=j;</span><br><span class="line">                    array[count][<span class="number">2</span>]=arrays[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历输出稀疏数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            System.out.println(array[i][<span class="number">0</span>]+<span class="string">&quot;\t&quot;</span>+array[i][<span class="number">1</span>]+<span class="string">&quot;\t&quot;</span>+array[i][<span class="number">2</span>]+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将稀疏数组变回去</span></span><br><span class="line">        <span class="comment">// 将稀疏数组的第0行赋值给新数组的行与列，确定新数组的行数与列数</span></span><br><span class="line">        <span class="keyword">int</span>[][] ar1 = <span class="keyword">new</span> <span class="keyword">int</span>[array[<span class="number">0</span>][<span class="number">0</span>]][array[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将稀疏数组的值赋值给新数组，其他的地方默认值为0</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            ar1[array[i][<span class="number">0</span>]][array[i][<span class="number">1</span>]]= array[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] ints : ar1) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> anInt : ints) &#123;</span><br><span class="line">                System.out.print(anInt+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://gitee.com/yoyosave/mapdepot1/raw/master/img/image-20210503134039944.png" alt="image-20210503134039944"></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习记录(二)</title>
      <link href="2021/05/01/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95(%E4%BA%8C)/"/>
      <url>2021/05/01/Java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95(%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Java学习记录-二"><a href="#Java学习记录-二" class="headerlink" title="Java学习记录(二)"></a>Java学习记录(二)</h2><h3 id="一、用户交互"><a href="#一、用户交互" class="headerlink" title="一、用户交互"></a>一、用户交互</h3><p>需要用到<code>Scanner</code>类，<code>Scanner</code>类来获取用户的输入</p><p>需要导入<code>java.util.Scanner</code>包</p><p>基本语法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Scanner s = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"><span class="keyword">if</span> (s.hasNext())&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    注意：NextLine 存在吞回车的现象</span></span><br><span class="line"><span class="comment">    同时其实我们输入的程序是hasNext()所赋予的。因此我们才能对用户是否输入做出判断</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    String str = s.nextLine();</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 要养成良好的习惯，用完关闭IO流</span></span><br><span class="line">s.close();</span><br></pre></td></tr></table></figure><p>我们还可以通过Scanner类的<code>next()</code>与<code>nextXXX()</code>获取用户输入的数据，也可以通过<code>hasNext()</code>与<code>hasNextXXX()</code>判断用户是否输入数据</p><p>拓展</p><blockquote><p><strong><code>Next():</code></strong></p><ul><li>一点要读到有效的字符串后才可以结束输入</li><li>对于有效字符之前的空白，Next()会自动将其去除；</li><li>只有输入有效字符后才将后面的空白作为分隔符或结束符</li><li><font color="red">next()不能得到带有空格的字符串</font></li></ul><p><strong><code>nextLine()：</code></strong></p><ul><li>以回车作为结束符，也就是说<code>nextLine()</code>返回的是输入回车之前的所有字符</li><li>可以获得空白</li><li>有吞回车的现象，不建议使用</li></ul></blockquote><h3 id="二、顺序结构"><a href="#二、顺序结构" class="headerlink" title="二、顺序结构"></a>二、顺序结构</h3><p><font color="red">java的基本结构就是顺序结构，也是任何算法都离不开的一种基本算法结构</font></p><p>顺序结构就是从上往下一句一句的执行。</p><h3 id="三、选择结构"><a href="#三、选择结构" class="headerlink" title="三、选择结构"></a>三、选择结构</h3><h4 id="①if选择结构"><a href="#①if选择结构" class="headerlink" title="①if选择结构"></a>①<code>if</code>选择结构</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if单选择结构</span></span><br><span class="line"><span class="keyword">if</span> (布尔表达式)&#123;</span><br><span class="line">    <span class="comment">//要执行的内容</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if双选择结构</span></span><br><span class="line"><span class="keyword">if</span> (布尔表达式)&#123;</span><br><span class="line">    <span class="comment">// 要执行的内容</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 要执行的内容</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if多选择结构</span></span><br><span class="line"><span class="keyword">if</span> (布尔表达式<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">// 要执行的内容</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(布尔表达式<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="comment">// 要执行的内容</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 要执行的内容</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套的if结构</span></span><br><span class="line"><span class="keyword">if</span> (布尔表达式<span class="number">1</span>)&#123;</span><br><span class="line">     <span class="comment">// 要执行的内容</span></span><br><span class="line">    <span class="keyword">if</span> (布尔表达式<span class="number">2</span>)&#123;</span><br><span class="line">         <span class="comment">// 要执行的内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="②switch选择结构"><a href="#②switch选择结构" class="headerlink" title="②switch选择结构"></a>②<code>switch</code>选择结构</h4><p>多选择结构另外一种先方式就是**<code>switch case</code>**语句。</p><p><code>switch</code> 语句中的变量类型可以是：</p><ul><li><code>byte</code>,<code>short</code>,<code>int</code>或<code>char</code></li><li>从java SE 7开始<code>switch</code>支持字符串String类型了，同时case标签必须为字符串或字面量</li><li>之所以支持字符串是因为java把字符串转成<code>哈希码</code>通过比较<code>哈希码</code>实现选择分支</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line">    <span class="keyword">case</span> value:</span><br><span class="line">        <span class="comment">// 语句</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> value:</span><br><span class="line">        <span class="comment">// 语句</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// 语句</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果不加break;就会发生case穿透;起不到选择的作用</span></span><br></pre></td></tr></table></figure><h3 id="四、循环结构"><a href="#四、循环结构" class="headerlink" title="四、循环结构"></a>四、循环结构</h3><h4 id="①while循环"><a href="#①while循环" class="headerlink" title="①while循环"></a>①<code>while</code>循环</h4><p>是最基本的循环，它的结构为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(布尔表达式)&#123;</span><br><span class="line">    <span class="comment">// 循环体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 只要布尔值为True就会一直执行下去。</span></span><br></pre></td></tr></table></figure><p><font color="red">注意：我们大多数的时候是要让循环停下来的，我们需要一个让表达式失效的方式结束循环。</font></p><p>如果循环条件一直为True，就会无限的循环下去成为死循环。我们要尽量避免死循环。</p><h4 id="②do-while循环"><a href="#②do-while循环" class="headerlink" title="②do...while循环"></a>②<code>do...while</code>循环</h4><p>与<code>while</code>循环不同的是哪怕条件不符合也至少能执行一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="comment">//循环体</span></span><br><span class="line">&#125;<span class="keyword">while</span>(布尔表达式);</span><br></pre></td></tr></table></figure><h4 id="③For循环"><a href="#③For循环" class="headerlink" title="③For循环"></a>③<code>For</code>循环</h4><p>这是一种支持迭代的通用结构，是最有效，最灵活的循环结构。</p><p><code>for</code>循环的执行次数是一开始就确定的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化;布尔表达式;更新)&#123;</span><br><span class="line">    <span class="comment">//代码语句</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)&#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 输出一个三角形</span></span><br><span class="line">        <span class="comment">// 因为五行所以循环五次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 输出一个倒直角三角型，留出空间</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">5</span>; j &gt; i; j--) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 输出一个反直角三角形</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; i ; k++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 在输出一个直角三角形</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">study</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出一个九九乘法表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">1</span>; r &lt;= i; r++) &#123;</span><br><span class="line">                System.out.print(r+<span class="string">&quot;*&quot;</span>+i+<span class="string">&quot;=&quot;</span>+r*i+<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增强<code>for</code>循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(声明语句:表达式)&#123;</span><br><span class="line">    <span class="comment">//循环体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="④break-continue-goto关键字"><a href="#④break-continue-goto关键字" class="headerlink" title="④break,continue,goto关键字"></a>④<code>break</code>,<code>continue</code>,<code>goto</code>关键字</h4><p><code>break</code>终止循环</p><p><code>continue</code>跳过本次循环</p><p><code>goto</code>关键字</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">outer:</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">101</span>; i &lt; <span class="number">150</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; i / <span class="number">2</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span> outer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.print(i+<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、方法"><a href="#五、方法" class="headerlink" title="五、方法"></a>五、方法</h3><p>java方法是语句的集合，他们在一起执行一个功能</p><ul><li>方法是解决一类问题的步骤的有序组合</li><li>方法包含于类或对象中</li><li>方法在程序中被创建，在其他地方被引用</li></ul><p>设计方法的原则：<font color="red">保持方法的原子性，一个方法只实现一个功能，方便后期拓展</font></p><p>方法的命名规则：<code>首字母小写</code>、<code>驼峰写法</code></p><h4 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h4><p>方法包含方法头与方法体：</p><ul><li>修饰符：可选，定义了方法的访问类型</li><li>返回值类型：方法可能会有返回值</li><li>方法名</li><li>参数类型<ul><li>形参：在方法被调用是接收数据</li><li>实参：调用方法时传入的参数</li></ul></li><li>方法体：方法包含的具体语句</li></ul><p><font color="red">传参其实是赋值</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法的两种调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 实例化类，通过实例化的类获取类中方法名</span></span><br><span class="line">    Demo01 demo01 = <span class="keyword">new</span> Demo01();</span><br><span class="line">    <span class="comment">// 实际参数就是我给他传递的参数,形参就是被调用时接收数据的参</span></span><br><span class="line">    System.out.println(demo01.add(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法的两种调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 实际参数就是我给他传递的参数,形参就是被调用时接收数据的参</span></span><br><span class="line">    System.out.println(add(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用静态的修饰符。使其变成类变量。就可以直接引用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h4><p>要素：</p><ul><li>方法名相同</li><li>参数不同（参数排列顺序，数量，数据类型）</li><li>返回值可以不同也可以相同</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(max(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 比大小</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> num2, <span class="keyword">int</span> num1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(num1, num2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 比大小</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">max</span><span class="params">(<span class="keyword">double</span> num2, <span class="keyword">double</span> num1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(num1, num2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="可变参数-不定向参数"><a href="#可变参数-不定向参数" class="headerlink" title="可变参数/不定向参数"></a>可变参数/不定向参数</h4><p>在指定参数类型后加上<code>...</code>就是可变参数</p><p>一个方法中只能指定一个可变参数，并且它必须是方法的最后一个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(max(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 比大小</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> num2, <span class="keyword">int</span>... num1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.max(num1, num2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个可变参数其实本质上就是数组</p><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>就是自己调用自己</p><p>递归结构包含：</p><ul><li>递归头：什么时候不调用自身，如果没有就会陷入死循环</li><li>递归提：什么时候需要调用自己</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Demo02 demo02 = <span class="keyword">new</span> Demo02();</span><br><span class="line">        System.out.println(demo02.test(<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 阶乘</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> num*test(num-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h3><p>计算器程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study10;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: yy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>: 16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">double</span> num1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> num2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入第一个数字:&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (scanner.hasNextDouble()) &#123;</span><br><span class="line">                num1 = scanner.nextDouble();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入正确的数字！&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入第二个数字:&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (scanner.hasNextDouble()) &#123;</span><br><span class="line">                num2 = scanner.nextDouble();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;请输入正确的数字！&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">&quot;请选择计算符号：+，-，*，/:&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (scanner.hasNext()) &#123;</span><br><span class="line">                String c = scanner.next();</span><br><span class="line">                <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                        sum = num1 + num2;</span><br><span class="line">                        System.out.println(sum);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:</span><br><span class="line">                        sum = num1 - num2;</span><br><span class="line">                        System.out.println(sum);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:</span><br><span class="line">                        sum = num1 * num2;</span><br><span class="line">                        System.out.println(sum);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:</span><br><span class="line">                        sum = num1 / num2;</span><br><span class="line">                        System.out.println(sum);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        System.out.println(<span class="string">&quot;输入的计算符错误！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;是否继续计算？(YES or NO)&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (scanner.hasNext())&#123;</span><br><span class="line">                String str = scanner.next();</span><br><span class="line">                <span class="keyword">if</span> (str.equals(<span class="string">&quot;no&quot;</span>))&#123;</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习记录</title>
      <link href="2021/04/30/java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>2021/04/30/java%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Java学习记录-一"><a href="#Java学习记录-一" class="headerlink" title="Java学习记录(一)"></a>Java学习记录(一)</h2><h3 id="一、数据类型"><a href="#一、数据类型" class="headerlink" title="一、数据类型"></a>一、数据类型</h3><p>强类型语言：</p><ul><li><font color="red">要求变量的使用要严格符合规定，所有变量都必须先定义再使用.</font></li></ul><p>弱类型语言：</p><ul><li>与强类型语言相反。</li></ul><blockquote><p>java的数据类型分为两大类：</p><ul><li><code>基本类型</code><ul><li>数值类型<ul><li>整数类型<ul><li>byte:1个字节的范围：-128~127</li><li>short:2个字节范围：-32768~32767</li><li>int:4个字节范围：-2147483648~2147483647</li><li>long:8个字节范围：太长不想抄，了解就好</li></ul></li><li>浮点类型<ul><li>float:4个字节</li><li>double:8个字节</li></ul></li><li>字符类型<ul><li>char:2个字节</li></ul></li></ul></li><li>boolean类型：占一位，值只有True or False</li></ul></li><li><code>引用类型</code><ul><li>类</li><li>接口</li><li>数组</li></ul></li></ul></blockquote><p>整数拓展：</p><ul><li>二进制：0b</li><li>十进制：</li><li>八进制：0</li><li>十六进制0x</li></ul><p>浮点数拓展：</p><ul><li><font color="red">最好完全避免使用浮点数进行比较</font></li></ul><p>字符拓展：</p><ul><li>所有的字符本质还是数字</li><li>在数字前面使用<code>\u</code>表示这是一串编码</li></ul><h3 id="二、类型转换"><a href="#二、类型转换" class="headerlink" title="二、类型转换"></a>二、类型转换</h3><p>运算中，不同类型的数据要先转换城同一类型，然后进行运算</p><p>各类型的容量</p><blockquote><p>低—————————————————————-&gt;高</p><p><code>byte</code>,<code>short</code>,<code>char</code>–&gt;<code>int</code>–&gt;<code>long</code>–&gt;<code>float</code>–&gt;<code>double</code></p><p><font color="red">注意：小数的优先级比整数要高很多</font></p></blockquote><p>强制类型转换：由高到低的时候需要用到强制转换（可能存在内存溢出的状况）</p><p>自动类型转换：由低到高的时候会自动转换</p><p>注意：</p><blockquote><p>1、不能对布尔值进行转换</p><p>2、不能把对象类型转换为不相干的类型</p><p>3、再把高容量转换低容量的时候，强制转换</p><p>4、转化的时候可能存在内存溢出的情况</p><p>5、小于int的类型相加后结果会自动转换城int</p></blockquote><h3 id="三、变量"><a href="#三、变量" class="headerlink" title="三、变量"></a>三、变量</h3><p>变量就是可以变化的量</p><p>java中变量是最基础的存储单元，其要素包括变量名，变量类型，作用域</p><h3 id="四、变量的作用域"><a href="#四、变量的作用域" class="headerlink" title="四、变量的作用域"></a>四、变量的作用域</h3><p>类变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a; <span class="comment">//如果不自行初始化，这个类型默认值为 0，0.0。布尔值默认是False 除了基本类型其他都是null</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        System.out.println(test.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>局部变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> a = <span class="number">1</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、常量"><a href="#五、常量" class="headerlink" title="五、常量"></a>五、常量</h3><p>初始化之后就不能改变值。（一种特殊的变量）</p><p>定义：<code>final</code></p><p>例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//修饰符不存在先后顺序</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(PI);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(PI);</span><br></pre></td></tr></table></figure><h3 id="六、命名规则"><a href="#六、命名规则" class="headerlink" title="六、命名规则"></a>六、命名规则</h3><ul><li>所有变量、方法、类名：见名知意</li><li>类成员变量：首字母小写和驼峰原则</li><li>局部变量：首字母小写和驼峰原则</li><li>常量：大写字母和下划线</li><li>类名：首字母大写和驼峰原则</li><li>方法名：首字母小写和驼峰原则</li></ul><h3 id="七、运算符"><a href="#七、运算符" class="headerlink" title="七、运算符"></a>七、运算符</h3><p>算数运算符：<code>+</code>,<code>-</code>,<code>*</code>,<code>/</code>,<code>%</code>,<code>++</code>,<code>--</code></p><p>赋值运算符：<code>=</code></p><p>关系运算符：<code>&gt;</code>,<code>&lt;</code>,<code>&gt;=</code>,<code>&lt;=</code>,<code>==</code>,<code>!=</code>,<code>instanceof</code></p><p>逻辑运算符：<code>&amp;&amp;</code>,<code>||</code>,<code>!</code></p><p>位运算符：<code>&amp;</code>,<code>|</code>,<code>^</code>,<code>~</code>,<code>&gt;&gt;</code>,<code>&lt;&lt;</code>,<code>&gt;&gt;&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A = 0011 1100</span></span><br><span class="line"><span class="comment">B = 0000 1101</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">A&amp;B = 0000 1100</span></span><br><span class="line"><span class="comment">A|B = 0011 1101</span></span><br><span class="line"><span class="comment">A^B = 0011 0001</span></span><br><span class="line"><span class="comment">~B = 1111 0010</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>条件运算符：<code>?:</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">String str = a&gt;<span class="number">0</span> ? <span class="string">&quot;正确&quot;</span>:<span class="string">&quot;错误&quot;</span>;</span><br></pre></td></tr></table></figure><p>拓展赋值运算符：<code>+=</code>,<code>-=</code>,<code>*=</code>,<code>/=</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//短路运算</span></span><br><span class="line"><span class="keyword">int</span> c = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">boolean</span> d = (c&lt;<span class="number">4</span>)&amp;&amp;(c++&lt;<span class="number">4</span>);</span><br><span class="line">System.out.println(d);</span><br><span class="line">System.out.println(c); <span class="comment">//c = 5; 也就是说当前面是错的时候，后面的没有执行；</span></span><br></pre></td></tr></table></figure><p>字符串连接符：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>+a+b);<span class="comment">//结果为“12”</span></span><br><span class="line">System.out.println(a+b+<span class="string">&quot;&quot;</span>);<span class="comment">//结果为“3”</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离散数学_2</title>
      <link href="2021/03/05/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6_2/"/>
      <url>2021/03/05/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6_2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="1-2-命题公式"><a href="#1-2-命题公式" class="headerlink" title="1.2 命题公式"></a>1.2 命题公式</h3><ol><li>简单命题的真值是确定的，称为<strong>命题常元（常项）</strong>。</li><li>取值0或1的变元称作<strong>命题变元（变项）</strong>。</li><li>将命题用联结词按照一定逻辑关系联结起来的符号串称为<strong>合式公式</strong>，合式公式定义如下：<ol><li>单个命题变元（或常元）是合式公式，称为<strong>原子命题公式</strong>。</li><li>若$A$是合式公式，则$\neg A$也是。</li><li>若$A, B$是合式公式，则$A\land B, A\lor B, A\to B, A\leftrightarrow B$也是。</li><li>有限次应用1-3形成的符号串是合式公式。</li></ol></li><li>合式公式也称为<strong>命题公式（形式）</strong>，简称为<strong>公式</strong>。</li><li>优先级：$\neg\ &gt;\ \land\ =\ \lor\ &gt;\ \to\ =\ \leftrightarrow$</li><li>设$p_1,p_2,\ldots,p_n$是公式$A$中的全部命题变元，给$p_1,p_2,\ldots,p_n$各指定一个真值，称为对$A$的一个<strong>赋值（解释）</strong>。<ol><li>若$A$在各种赋值中均为真，则称为<strong>重言式（永真式）</strong>。</li><li>若$A$在各种赋值中均为假，则称为<strong>矛盾式（永假式）</strong>。</li><li>若$A$不是矛盾式，则称为<strong>可满足式</strong>。</li></ol></li><li>真值表判断公式类型的原则：<ol><li>若真值表最后一列全为1，则公式为重言式。</li><li>若真值表最后一列全为0，则公式为矛盾式。</li><li>若真值表最后一列至少有一个为1，则公式为可满足式。</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板</title>
      <link href="2021/03/05/%E6%A8%A1%E6%9D%BF/"/>
      <url>2021/03/05/%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板 </tag>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>离散数学_1</title>
      <link href="2021/03/05/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6_1/"/>
      <url>2021/03/05/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6_1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="1-1-命题与联结词"><a href="#1-1-命题与联结词" class="headerlink" title="1.1 命题与联结词"></a>1.1 命题与联结词</h3><ol><li><p>命题</p><ol><li>非真即假的陈述句称作<strong>命题</strong>。</li><li>不能被分解位更简单的命题称作<strong>简单命题</strong>或<strong>原子命题</strong>。</li><li>由简单命题通过联结词构成的命题称作<strong>复合命题</strong>。</li><li>命题所表达的判断结果称为命题的<strong>真值</strong>。</li><li>一般地，以$p,q,r,\ldots$表示原子命题，以$1$表示命题的真值为真，$0$表示命题的真值为假。</li></ol></li><li><p>联结词</p><ol><li><p>符号$\neg$称作<strong>否定联结词</strong>。</p><ol><li><p>复合命题“非p”称为p的<strong>否定式</strong>，记作$\neg p$。</p></li><li><table><thead><tr><th align="center">$p$</th><th align="center">$\neg p$</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">1</td></tr><tr><td align="center">1</td><td align="center">0</td></tr></tbody></table></li></ol></li><li><p>符号$\land$称作<strong>合取联结词</strong>。</p><ol><li>复合命题“p并且q”称为p与q的<strong>合取式</strong>，记作$\land$。</li><li></li></ol><table><thead><tr><th align="center">$p$</th><th align="center">$q$</th><th align="center">$p\land q$</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr></tbody></table></li><li><p>符号$\lor$称作<strong>析取联结词</strong>。</p><ol><li>复合命题“p或q”称为p与q的<strong>析取式</strong>，记作$\lor$。</li><li></li></ol><table><thead><tr><th align="center">$p$</th><th align="center">$q$</th><th align="center">$p\lor q$</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">1</td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr></tbody></table></li><li><p>符号$\to$称作<strong>蕴含联结词</strong>。</p><ol><li>复合命题“如果p，则q”称为p与q的<strong>蕴含式</strong>，记作$\to$。</li><li></li></ol><table><thead><tr><th align="center">$p$</th><th align="center">$q$</th><th align="center">$p\to q$</th></tr></thead><tbody><tr><td align="center"><strong>0</strong></td><td align="center">0</td><td align="center">1</td></tr><tr><td align="center"><strong>0</strong></td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center"><strong>1</strong></td><td align="center"><strong>0</strong></td><td align="center"><strong>0</strong></td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr></tbody></table><ol start="3"><li>可以简单将$\to$类比为$\leq$ </li></ol></li><li><p>符号$\leftrightarrow$称作<strong>等价联结词</strong>。</p><ol><li>复合命题“p当且仅当q”称为p与q的<strong>等价式</strong>，记作$\leftrightarrow$。</li><li></li></ol><table><thead><tr><th align="center">$p$</th><th align="center">$q$</th><th align="center">$p\leftrightarrow q$</th></tr></thead><tbody><tr><td align="center"><strong>0</strong></td><td align="center"><strong>0</strong></td><td align="center"><strong>1</strong></td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center"><strong>1</strong></td><td align="center"><strong>1</strong></td><td align="center"><strong>1</strong></td></tr></tbody></table></li><li><p>总结</p></li></ol><table><thead><tr><th align="center">$p$</th><th align="center">$q$</th><th align="center">$\neg p$</th><th align="center">$p\land q$</th><th align="center">$p\lor q$</th><th align="center">$p\to q$</th><th align="center">$p\leftrightarrow q$</th></tr></thead><tbody><tr><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">0</td></tr><tr><td align="center">1</td><td align="center">0</td><td align="center">0</td><td align="center">0</td><td align="center">1</td><td align="center">0</td><td align="center">0</td></tr><tr><td align="center">1</td><td align="center">1</td><td align="center">0</td><td align="center">1</td><td align="center">1</td><td align="center">1</td><td align="center">1</td></tr></tbody></table></li></ol>]]></content>
      
      
      <categories>
          
          <category> 学术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言的初次接触</title>
      <link href="2021/03/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80_1/"/>
      <url>2021/03/05/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80_1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="汇编语言的初次接触"><a href="#汇编语言的初次接触" class="headerlink" title="汇编语言的初次接触"></a>汇编语言的初次接触</h2><h3 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h3><ul><li>汇编语言是<font color="red">低级语言</font></li><li>汇编语言是各种CPU提供的机器指令的助记符集合</li></ul><blockquote><p>问：什么是汇编语言？</p><p>答：充分获得底层编程的体验，深刻理解机器运行程序的机理就是汇编语言</p></blockquote><h3 id="机器语言"><a href="#机器语言" class="headerlink" title="机器语言"></a>机器语言</h3><ul><li>机器指令的集合</li><li>机器指令就是一台机器可以正确执行的命令</li></ul><blockquote><p>问：什么是计算机系统？</p><p>答：由CPU和其他受CPU直接或间接控制的芯片、器件、设备组成的系统</p></blockquote><h3 id="汇编语言的分类"><a href="#汇编语言的分类" class="headerlink" title="汇编语言的分类"></a>汇编语言的分类</h3><h4 id="王爽分类"><a href="#王爽分类" class="headerlink" title="王爽分类"></a>王爽分类</h4><ul><li>汇编指令：机器码的助记符，有对应的机器码</li><li>伪指令：没有对应的机器码，由编译器执行，计算机不执行</li><li>其他符号：如：”+”,”-“,”*”,”/“,由编译器识别，没有对应的机器码</li></ul><h4 id="另外一种分类"><a href="#另外一种分类" class="headerlink" title="另外一种分类"></a>另外一种分类</h4><ul><li>标号域</li><li>操作域</li><li>操作数域</li><li>注释域</li></ul><h3 id="存储单元"><a href="#存储单元" class="headerlink" title="存储单元"></a>存储单元</h3><p>​    存储器被划分成若干个存储单元，每个存储单元从0开始顺序编号</p><ul><li>存储单元可以存8个bit也就是8位二进制数，即一个字节Byte</li><li>存储单元的容量是以字节为最小单位进行运算的</li></ul><h3 id="CPU对存储器的读写"><a href="#CPU对存储器的读写" class="headerlink" title="CPU对存储器的读写"></a>CPU对存储器的读写</h3><ul><li>存储单元的地址（地址信息）</li><li>器件的选择，度或者写的命令（控制信息）</li><li>读或写的数据（数据信息）</li></ul><h3 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h3><p>​    在计算机中有专门连接CPU和其他芯片的导线，通常称为总线，从物理上讲总线就是一根根导线的集合。</p><p>但是根据传送信息上不同从逻辑上又分为三类</p><h4 id="地址总线"><a href="#地址总线" class="headerlink" title="地址总线"></a>地址总线</h4><ul><li>一个CPU有N根地址线，则可以说地址总线宽度为N，这样的CPU最多可以寻找2的N次方个内存单元</li><li>内存单元的单位是bit</li></ul><h4 id="数据总线"><a href="#数据总线" class="headerlink" title="数据总线"></a>数据总线</h4><ul><li>数据总线的宽度决定了CPU和外界的数据传输速度，8根数据总线一次可以传送8bit(一个Byte),16根是两个</li></ul><h4 id="控制总线"><a href="#控制总线" class="headerlink" title="控制总线"></a>控制总线</h4><ul><li>控制总线决定了CPU对外部器件的控制能力</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><code>汇编指令</code>是<code>机器指令</code>的助记符，同<code>机器指令</code>一一对应</li><li>每一种CPU都有自己的<code>汇编指令</code>集</li><li>CPU可以直接使用的信息存储在存储器（在一定意义上存储器就是内存。）</li><li>在存储器中数据与指令没有任何区别都是二进制信息</li><li>存储单元从零开始编号</li><li>一个存储单元可以存8个bit，即8位二进制数，也就是一个字节Byte</li><li>1Byte = 8bit、1KB = 1024Byte、1MB = 1024KB、1GB = 1024MB</li><li>内存单元是以bit为单位</li><li>存储单元是以Byte为单位</li><li>每一个CPU芯片都有许多管脚，这些管脚与总线相连。也就是说这些管脚引出总线。一个CPU引出3种总线的宽度代表这个CPU不同方面的性能<ul><li>地址总线的宽度决定了CPU的寻址能力</li><li>数据总线的宽度决定了CPU与其他器件进行数据传送时的一次数据传送量</li><li>控制总线的宽度决定了CPU对系统中的其他器件控制能力</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
          <category> 语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编语言 </tag>
            
            <tag> CPU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/01/21/hello-world/"/>
      <url>2021/01/21/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
